{"version":3,"sources":["components/TaskItem.js","helpers/reorder.js","components/TasksList.js","helpers/changeDrugStyle.js","components/ValidationError.js","components/InputPannel.js","actions/addTask.js","actions/deleteTask.js","actions/editTask.js","actions/reOrderTasks.js","actions/deleteSelect.js","actions/addSelect.js","components/App.js","index.js","reducers/toDo.js"],"names":["TaskItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleEditTask","isCurrentTaskEditing","state","setState","taskEditInputRef","current","focus","toggleEditing","saveEditTask","_this$props","taskData","editTask","id","taskTitle","changeTaskTitle","e","target","value","toggleSelectTask","deleteTask","title","React","createRef","_this$props2","selected","isAnyTaskEditing","_this$state","react_default","a","createElement","className","classNames","type","ref","onChange","includes","onClick","Component","reorder","list","startIndex","endIndex","result","Array","from","_result$splice","splice","removed","slicedToArray","TaskList","tasks","onDragEnd","bind","assertThisInitialized","destination","source","index","reOrderTasks","nextProps","_this2","omit","react_beautiful_dnd_esm","length","droppableId","isDropDisabled","provided","snapshot","innerRef","style","isDraggingOver","background","padding","map","key","draggableId","assign","draggableProps","dragHandleProps","isDragging","draggableStyle","objectSpread","userSelect","grid","margin","concat","src_components_TaskItem","placeholder","ValidationError","role","InputPannel","inputChange","inputAddTask","addTask","checkValid","date","Date","getTime","validTrue","validFalse","onKeyDown","keyCode","test","isValid","components_ValidationError","payload","deleteSelect","addSelect","App","_this$props$actions","actions","src_components_InputPannel","components_TasksList","connect","store","dispatch","bindActionCreators","createStore","initialStore","arguments","undefined","action","toConsumableArray","editedTask","find","task","indexOf","filter","select","input","valid","appNode","providerNode","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f027e9f5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport './TaskItem.css';\r\nimport classNames from 'classnames';\r\n\r\nclass TaskItem extends React.Component{\r\n    static propTypes = {\r\n        selected: PropTypes.array.isRequired,\r\n        editTask: PropTypes.func.isRequired,\r\n        taskData: PropTypes.shape({\r\n            id: PropTypes.number.isRequired,\r\n            title: PropTypes.string.isRequired,\r\n        }).isRequired,\r\n        deleteTask: PropTypes.func.isRequired,\r\n        isAnyTaskEditing: PropTypes.bool.isRequired,\r\n        toggleSelectTask: PropTypes.func.isRequired,\r\n        toggleEditing: PropTypes.func.isRequired,\r\n    };\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            isCurrentTaskEditing:false,\r\n            taskTitle: props.taskData.title\r\n        };\r\n\r\n        this.taskEditInputRef = React.createRef();\r\n    }\r\n\r\n    toggleEditTask = () =>{\r\n        const {isCurrentTaskEditing} = this.state;\r\n        this.setState({isCurrentTaskEditing: !isCurrentTaskEditing},()=>{\r\n            if (!isCurrentTaskEditing){\r\n                this.taskEditInputRef.current && this.taskEditInputRef.current.focus()\r\n            }\r\n        });\r\n\r\n        this.props.toggleEditing();\r\n    };\r\n\r\n    saveEditTask = () =>{\r\n        const {taskData, editTask} = this.props;\r\n        editTask(taskData.id, this.state.taskTitle);\r\n        this.toggleEditTask();\r\n    };\r\n\r\n    changeTaskTitle = (e) =>{\r\n        this.setState({taskTitle: e.target.value});\r\n    };\r\n\r\n    toggleSelectTask = () =>{\r\n        this.props.toggleSelectTask(this.props.taskData.id)\r\n    };\r\n\r\n    deleteTask = () =>{\r\n        this.props.deleteTask(this.props.taskData.id)\r\n    };\r\n\r\n    render(){\r\n        const {taskData, selected, isAnyTaskEditing} = this.props;\r\n        const {isCurrentTaskEditing, taskTitle} = this.state;\r\n\r\n        return (\r\n            <li\r\n                className={classNames(\r\n                    'task-item',\r\n                    isAnyTaskEditing && !isCurrentTaskEditing && 'no-clickable'\r\n                )}>\r\n                {isCurrentTaskEditing\r\n                    ? <input\r\n                        type=\"text\"\r\n                        className='task-edit-input'\r\n                        ref={this.taskEditInputRef}\r\n                        value={taskTitle}\r\n                        onChange={this.changeTaskTitle}/>\r\n                    : <span\r\n                        className={classNames(\r\n                            'task-text',\r\n                            selected.includes(taskData.id) && 'task-text-selected'\r\n                        )}>\r\n                        {taskTitle}\r\n                     </span>\r\n                }\r\n\r\n                {!isCurrentTaskEditing &&\r\n                    <button\r\n                        className='btn-icon'\r\n                        onClick={this.deleteTask}>\r\n                        <i className=\"fa fa-trash\" />\r\n                    </button>\r\n                }\r\n                {isCurrentTaskEditing\r\n                    ? <button\r\n                        className='btn btn-primary btn-save'\r\n                        onClick={this.saveEditTask}>\r\n                        save\r\n                     </button>\r\n                    : <button\r\n                        className='btn-toggle-edit btn-icon'\r\n                        onClick={this.toggleEditTask}>\r\n                        <i className=\"fa fa-edit\" />\r\n                     </button>\r\n                }\r\n                {!isCurrentTaskEditing &&\r\n                    <button\r\n                        className='btn-icon'\r\n                        onClick={this.toggleSelectTask}>\r\n                        {selected.includes(taskData.id)\r\n                            ? <i className=\"fa fa-minus\" />\r\n                            : <i className=\"fa fa-check\" />}\r\n                    </button>\r\n                }\r\n\r\n            </li>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TaskItem","// function to help us with reordering tasks\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\nexport default reorder;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TaskItem from \"./TaskItem\";\r\nimport omit from 'object.omit';\r\nimport './TasksList.css';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport reorder from '../helpers/reorder';\r\nimport {getItemStyle, getListStyle} from '../helpers/changeDrugStyle';\r\n\r\nclass TaskList extends React.Component{\r\n    static propTypes = {\r\n        tasks: PropTypes.array.isRequired,\r\n        selected: PropTypes.array.isRequired,\r\n        toggleSelectTask: PropTypes.func.isRequired,\r\n        deleteTask: PropTypes.func.isRequired,\r\n        editTask: PropTypes.func.isRequired,\r\n        reOrderTasks: PropTypes.func.isRequired\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tasks: props.tasks,\r\n            isAnyTaskEditing: false\r\n        };\r\n        this.onDragEnd = this.onDragEnd.bind(this);\r\n    }\r\n\r\n    onDragEnd(result) {\r\n        // dropped outside the list\r\n        if (!result.destination) {\r\n            return;\r\n        }\r\n\r\n        const tasks = reorder(\r\n            this.state.tasks,\r\n            result.source.index,\r\n            result.destination.index\r\n        );\r\n\r\n        this.props.reOrderTasks(tasks);\r\n\r\n        this.setState({\r\n            tasks\r\n        });\r\n    }\r\n\r\n    toggleEditing = () =>{\r\n        this.setState({isAnyTaskEditing:!this.state.isAnyTaskEditing})\r\n    };\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if(this.props !==nextProps) {\r\n            this.setState({\r\n                tasks: nextProps.tasks\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const props = omit(this.props, 'tasks');\r\n\r\n        return (\r\n                <DragDropContext onDragEnd={this.onDragEnd}>\r\n                    {this.state.tasks.length > 0 &&\r\n                        <Droppable droppableId=\"droppable\" isDropDisabled={this.state.isAnyTaskEditing}>\r\n                            {(provided, snapshot) => (\r\n                            <div\r\n                                ref={provided.innerRef}\r\n                                className='droppable-block'\r\n                                style={getListStyle(snapshot.isDraggingOver)}>\r\n                                {this.state.tasks.map((taskData, index) => (\r\n                                    <Draggable key={taskData.id} draggableId={taskData.id} index={index}>\r\n                                        {(provided, snapshot) => (\r\n                                            <div\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.draggableProps}\r\n                                                {...provided.dragHandleProps}\r\n                                                style={getItemStyle(\r\n                                                    snapshot.isDragging,\r\n                                                    provided.draggableProps.style\r\n                                                )}>\r\n                                                <TaskItem\r\n                                                    taskData={taskData}\r\n                                                    key={index}\r\n                                                    toggleEditing={this.toggleEditing}\r\n                                                    isAnyTaskEditing={this.state.isAnyTaskEditing}\r\n                                                    {...props}/>\r\n                                            </div>\r\n                                        )}\r\n                                    </Draggable>\r\n                                ))}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                            )}\r\n                        </Droppable>\r\n                    }\r\n                </DragDropContext>\r\n            )\r\n    }\r\n}\r\n\r\nexport default TaskList\r\n","const grid = 8;\r\n\r\nexport const getItemStyle = (isDragging, draggableStyle) => ({\r\n    // some basic styles to make the items look a bit nicer\r\n    userSelect: 'none',\r\n    padding: grid * 2,\r\n    margin: `0 0 ${grid}px 0`,\r\n\r\n    // change background colour if dragging\r\n    background: isDragging ? 'lightgreen' : '#eee',\r\n\r\n    // styles we need to apply on draggables\r\n    ...draggableStyle,\r\n});\r\n\r\nexport const getListStyle = isDraggingOver => ({\r\n    background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n    padding: grid,\r\n\r\n});\r\n\r\n","import React from 'react';\r\n\r\n function ValidationError () {\r\n    return (\r\n        <div className=\"alert alert-danger\" role=\"alert\">\r\n            Please, enter valid data!\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ValidationError;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './InputPannel.css';\r\nimport ValidationError from './ValidationError';\r\n\r\nclass InputPannel extends React.Component{\r\n    static propTypes = {\r\n        addTask: PropTypes.func.isRequired,\r\n    };\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            isValid:true,\r\n            inputAddTask:''\r\n        };\r\n    }\r\n\r\n    inputChange = (e) => {\r\n        this.setState({inputAddTask: e.target.value});\r\n    };\r\n\r\n    addTask = () =>{\r\n        if (this.checkValid()) {\r\n            let date = new Date();\r\n            this.props.addTask(this.state.inputAddTask, date.getTime());\r\n            this.setState({inputAddTask:''});\r\n            this.validTrue();\r\n        } else {\r\n            this.validFalse();\r\n        }\r\n    };\r\n\r\n    onKeyDown = (e) =>{\r\n        e.keyCode === 13 && this.addTask();\r\n    };\r\n\r\n    checkValid = () =>{\r\n        return /^(\\s?[a-zа-яё0-9(),.!-]{1,20}\\s?){1,14}$/i.test(this.state.inputAddTask);\r\n    };\r\n\r\n    validTrue = () =>{\r\n        this.setState({isValid:true})\r\n    };\r\n\r\n    validFalse = () =>{\r\n        this.setState({isValid:false})\r\n    };\r\n\r\n    render(){\r\n        const {isValid, inputAddTask} = this.state;\r\n\r\n        return (\r\n            <div className=\"form-group\">\r\n                {isValid || <ValidationError />}\r\n\r\n                <input type=\"text\"\r\n                       className='form-control input-add-task'\r\n                       placeholder=\"To do ...\"\r\n                       value={inputAddTask}\r\n                       onKeyDown={this.onKeyDown}\r\n                       onChange={this.inputChange}/>\r\n\r\n                <button className='btn btn-success btn-add-task'\r\n                        onClick={this.addTask}>\r\n                        Add Task\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InputPannel\r\n","/**\r\n *\r\n * @param {string} title\r\n * @param {number} id\r\n * @returns {{type: string, payload: object }}\r\n */\r\nexport default function(title, id) {\r\n    return {\r\n        type: 'ADD_TASK',\r\n        payload: {title, id}\r\n    };\r\n}\r\n","/**\r\n *\r\n * @param {number} id\r\n * @returns {{type: string, payload: object }}\r\n */\r\nexport default function(id) {\r\n    return {\r\n        type: 'DELETE_TASKS',\r\n        payload: {id}\r\n    };\r\n}\r\n","/**\r\n *\r\n * @param {string} title\r\n * @param {number} id\r\n * @returns {{type: string, payload: object }}\r\n */\r\nexport default function(id, title) {\r\n    return {\r\n        type: 'EDIT_TASK',\r\n        payload: {id, title}\r\n    };\r\n}\r\n","/**\r\n *\r\n * @param {array} tasks\r\n * @returns {{type: string}}\r\n */\r\nexport default function(tasks) {\r\n    return {\r\n        type: 'REORDER_TASKS',\r\n        payload: {tasks}\r\n    };\r\n}\r\n","/**\r\n *\r\n * @param {number} id\r\n * @returns {{type: string, payload: object }}\r\n */\r\nexport default function(id) {\r\n    return {\r\n        type: 'DELETE_SELECT',\r\n        payload: {id}\r\n    };\r\n}\r\n","/**\r\n *\r\n * @param {number} id\r\n * @returns {{type: string, payload: object }}\r\n */\r\nexport default function(id) {\r\n    return {\r\n        type: 'ADD_SELECT',\r\n        payload: {id}\r\n    };\r\n}\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport {connect} from 'react-redux';\nimport TasksList from \"./TasksList\";\nimport InputPannel from \"./InputPannel\";\nimport {bindActionCreators} from 'redux';\nimport addTask from '../actions/addTask';\nimport deleteTask from '../actions/deleteTask';\nimport editTask from '../actions/editTask';\nimport reOrderTasks from '../actions/reOrderTasks';\nimport deleteSelect from '../actions/deleteSelect';\nimport addSelect from '../actions/addSelect';\n\nclass App extends React.Component{\n    static propTypes = {\n        tasks: PropTypes.array.isRequired,\n        selected: PropTypes.array.isRequired,\n        actions: PropTypes.shape({\n            addTask: PropTypes.func.isRequired,\n            reOrderTasks: PropTypes.func.isRequired,\n            editTask: PropTypes.func.isRequired,\n            deleteTask: PropTypes.func.isRequired,\n            addSelect: PropTypes.func.isRequired,\n            deleteSelect: PropTypes.func.isRequired\n        }).isRequired\n    };\n\n    toggleSelectTask = (id) =>{\n        const {addSelect, deleteSelect}=this.props.actions;\n\n        if (!this.props.selected.includes(id) ){\n            addSelect(id)\n        } else {\n            deleteSelect(id)\n        }\n    };\n\n    deleteTask = (id) =>{\n        this.props.actions.deleteTask(id);\n    };\n\n    editTask = (id, value) =>{\n        this.props.actions.editTask(id, value);\n    };\n\n    reOrderTasks = (tasks) =>{\n        this.props.actions.reOrderTasks(tasks);\n    };\n\n    render(){\n        return (<div>\n                    <InputPannel\n                        onKeyDown={this.onKeyDown}\n                        onChange={this.inputChange}\n                        addTask={this.props.actions.addTask}/>\n\n                    <TasksList\n                        tasks={this.props.tasks}\n                        selected={this.props.selected}\n                        toggleSelectTask={this.toggleSelectTask}\n                        deleteTask={this.deleteTask}\n                        editTask={this.editTask}\n                        reOrderTasks={this.reOrderTasks}/>\n                </div>\n        )\n    }\n}\n\nexport default connect(store=>({\n            tasks: \t  store.tasks,\n            selected: store.selected,\n        }),\n        dispatch=>({\n            actions: bindActionCreators({\n                deleteSelect,\n                addSelect,\n                addTask,\n                deleteTask,\n                editTask,\n                reOrderTasks\n                }, dispatch)\n        })\n    )(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport {Provider} from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './reducers/toDo';\n\nconst initialStore={\n    tasks:[],\n    selected:[],\n    input:'',\n    valid:true,\n};\n\nconst store = createStore( reducer, initialStore);\n\nconst appNode = React.createElement(App);\nconst providerNode = React.createElement(Provider, {store}, appNode);\n\nReactDOM.render(providerNode, document.getElementById('root'));","/**\r\n *\r\n * @param {Object} state\r\n * @param {Object} action\r\n * @param {string} action.type\r\n * @param {Object} action.payload\r\n * @return {Object}\r\n */\r\nexport default function (initialStore={}, action) {\r\n\r\n    switch(action.type){\r\n        case 'ADD_TASK':\r\n            return (\r\n                {...initialStore, tasks: [...initialStore.tasks, action.payload] }\r\n            );\r\n\r\n        case 'EDIT_TASK':\r\n            //find edited task, change title and put on the same position in array\r\n\r\n            let tasks = [...initialStore.tasks];\r\n            const editedTask = tasks.find(task => task.id === action.payload.id);\r\n            const index = tasks.indexOf(editedTask);\r\n            tasks.splice(index, 1, {id: action.payload.id, title:action.payload.title});\r\n\r\n            return {...initialStore, tasks: tasks};\r\n\r\n        case 'DELETE_TASKS':\r\n            return (\r\n                {...initialStore, tasks:\r\n                        initialStore.tasks.filter((task)=>task.id !== action.payload.id)\r\n                }\r\n            );\r\n\r\n        case 'REORDER_TASKS':\r\n            return {...initialStore, tasks: action.payload.tasks};\r\n\r\n        case 'DELETE_SELECT':\r\n            return (\r\n                {  ...initialStore, selected:\r\n                        initialStore.selected.filter(select=>select !== action.payload.id) }\r\n            );\r\n\r\n        case 'ADD_SELECT':\r\n            return (\r\n                { ...initialStore, selected:\r\n                        [...initialStore.selected, action.payload.id]}\r\n            );\r\n\r\n        default:\r\n            return initialStore;\r\n    }\r\n}"],"sourceRoot":""}